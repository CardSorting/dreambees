rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to validate video URL
    function isValidVideoUrl(url) {
      // Allow both S3 signed URLs and CloudFront URLs
      let s3Pattern = "https://video-generator-subtitles.s3.*.amazonaws.com/.*";
      let cloudFrontPattern = "https://d2kp8efsbrxae1.cloudfront.net/.*";
      
      return url.matches(s3Pattern) || url.matches(cloudFrontPattern);
    }

    // Helper function to validate video document
    function isValidVideo() {
      let requiredFields = ['url', 'createdAt', 'status'];
      let incomingData = request.resource.data;
      
      return incomingData.keys().hasAll(requiredFields) &&
             incomingData.url is string &&
             isValidVideoUrl(incomingData.url) &&
             incomingData.createdAt is string &&
             incomingData.status in ['processing', 'completed', 'failed'];
    }

    // Allow users to read and write their own data
    match /users/{userId} {
      allow read, write: if isOwner(userId);

      // Allow users to manage their videos collection
      match /videos/{videoId} {
        allow read: if isOwner(userId);
        allow create: if isOwner(userId) && isValidVideo();
        allow update: if isOwner(userId) && (
          // Allow updating status and url separately during processing
          (request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['status', 'url', 'progress', 'error']) &&
           request.resource.data.status in ['processing', 'completed', 'failed'] &&
           (request.resource.data.url == resource.data.url || 
            isValidVideoUrl(request.resource.data.url)))
        );
        allow delete: if isOwner(userId);
      }

      // Allow users to manage their video collections
      match /collections/{collectionId} {
        allow read: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);

        // Allow managing videos within collections
        match /videos/{videoId} {
          allow read: if isOwner(userId);
          allow create: if isOwner(userId) && isValidVideo();
          allow update: if isOwner(userId) && (
            // Allow updating status and url separately during processing
            (request.resource.data.diff(resource.data).affectedKeys()
              .hasOnly(['status', 'url', 'progress', 'error']) &&
             request.resource.data.status in ['processing', 'completed', 'failed'] &&
             (request.resource.data.url == resource.data.url || 
              isValidVideoUrl(request.resource.data.url)))
          );
          allow delete: if isOwner(userId);
        }
      }
    }
    
    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
